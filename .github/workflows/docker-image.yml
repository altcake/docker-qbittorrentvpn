name: Docker Image CI

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  check_version:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        application-name: ['qbittorrentvpn-synology_3.10']
    outputs:
      qbversion: ${{ steps.qbv.outputs.QBV }}
      response: ${{ steps.response.outputs.RESPONSE_CODE }}
    steps:
    - name: Get latest qbittorrent version
      id: qbv
      run: |
        echo "QBV=$(curl -sX GET "https://api.github.com/repos/qBittorrent/qBittorrent/tags" | jq '.[] | select(.name | index ("alpha") | not) | select(.name | index ("beta") | not) | select(.name | index ("rc") | not) | .name' | head -n 1 | tr -d '"' | cut -d '-' -f 2)" >> $GITHUB_OUTPUT
    - name: Check if image exists for latest qbittorrent version
      id: response
      run: |
        echo "Latest qbittorrent version: ${{ steps.qbv.outputs.QBV }}"
        echo "RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://hub.docker.com/v2/namespaces/${{ secrets.DOCKER_USER }}/repositories/${{ matrix.application-name }}/tags/${{ steps.qbv.outputs.QBV }})" >> $GITHUB_OUTPUT
    - name: Check response code
      run: |
        echo "Response code: ${{ steps.response.outputs.RESPONSE_CODE }}"
        
  build_and_push:
    name: Docker image build and push to Docker Hub
    needs: check_version
    if: (needs.check_version.outputs.response != '200') || (${GITHUB_EVENT_NAME} == 'workflow_dispatch')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        application-name: ['qbittorrentvpn-synology_3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Build version tagged Docker image
      run: docker build --file Dockerfile --tag ${{ secrets.DOCKER_USER }}/${{ matrix.application-name }}:${{ needs.check_version.outputs.qbversion }} .

    - name: Build latest tagged Docker image
      run: docker build --file Dockerfile --tag ${{ secrets.DOCKER_USER }}/${{ matrix.application-name }} .
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Push version tagged Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USER }}/${{ matrix.application-name }}:${{ needs.check_version.outputs.qbversion }}
    
    - name: Push latest tagged Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USER }}/${{ matrix.application-name }}
